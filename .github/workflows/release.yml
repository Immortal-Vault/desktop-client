name: Release Windows

on:
  push:
    branches:
      - prod

env:
  CARGO_TARGET_DIR: ${{ github.workspace }}/target

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: ‚öôÔ∏è Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-pc-windows-msvc

      - name: üíæ Cache Rust dependencies and target dir
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.cargo\bin
            C:\Users\runneradmin\.cargo\registry\index
            C:\Users\runneradmin\.cargo\registry\cache
            C:\Users\runneradmin\.cargo\git\db
            ${{ github.workspace }}/target
          key: Windows-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            Windows-cargo-

      - name: üíæ Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            node_modules
          key: Windows-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            Windows-yarn-

      - name: üì¶ Install Yarn
        run: npm install -g yarn

      - name: üì• Install project dependencies
        run: yarn install --frozen-lockfile

      - name: üåê Download and install WebView2 (non-blocking)
        run: |
          $url = "https://go.microsoft.com/fwlink/p/?LinkId=2124703"
          $output = "$env:TEMP\\MicrosoftEdgeWebview2Setup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output -TimeoutSec 60
          Start-Process -FilePath $output -ArgumentList '/install','/quiet','/norestart'

      - name: üßπ Clean the NSIS directory
        run: |
          Remove-Item -Recurse -Force "${{ env.CARGO_TARGET_DIR }}\release\bundle\nsis\*"
        shell: pwsh

      - name: üõ† Build Tauri app (.exe)
        run: yarn windows-release
        env:
          CARGO_TARGET_DIR: ${{ env.CARGO_TARGET_DIR }}
          VITE_ENVS_VARS_URL: ${{ secrets.VITE_ENVS_VARS_URL }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_APP_STAGE: production

      - name: üßë‚Äçüíª Extract version from package.json
        run: |
          $VERSION = node -p "require('./package.json').version"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: üìù Generate Release JSON file
        run: |
          const fs = require('fs');
          const path = require('path');

          const version = process.env.VERSION;
          const pubDate = new Date().toISOString();

          const signaturePath = path.join('${{ env.CARGO_TARGET_DIR }}', 'release', 'bundle', 'nsis', `Immortal.Vault_${version}_x64-setup.exe.sig`);
          const signature = fs.readFileSync(signaturePath, 'utf8').trim();

          const latest = {
            version,
            notes: `Release ${version}`,
            pub_date: pubDate,
            platforms: {
              "windows-x86_64": {
                signature,
                url: `https://github.com/Immortal-Vault/desktop-client/releases/latest/download/Immortal.Vault_${version}_x64-setup.exe`
              }
            }
          };

          fs.writeFileSync('./latest.json', JSON.stringify(latest, null, 2));
        shell: node

      - name: üöÄ Create and upload GitHub release (no tag)
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${VERSION}
          tag_name: prod-${VERSION}
          files: |
            ${{ env.CARGO_TARGET_DIR }}/release/bundle/nsis/*.exe
            ${{ env.CARGO_TARGET_DIR }}/release/bundle/nsis/*.sig
            ./latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
